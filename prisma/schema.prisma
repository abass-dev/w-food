generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  phoneNumber   String?
  accounts      Account[]
  sessions      Session[]
  isVerified    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  preferences   UserPreference?
  favoriteDishes FavoriteDish[]
  orders        Order[]
  reviews     Review[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Restaurant {
  id          String   @id @default(cuid())
  name        String
  description String
  address     String
  phone       String
  email       String
  openingHours Json
  menuCategories MenuCategory[]
  orders      Order[]
}

model MenuCategory {
  id          String   @id @default(cuid())
  name        String
  restaurant  Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  menuItems   MenuItem[]
}

model MenuItem {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Decimal
  image       String
  category    MenuCategory @relation(fields: [categoryId], references: [id])
  categoryId  String
  orderItems  OrderItem[]
  cartItems   CartItem[]
  favoriteDishes FavoriteDish[]
  reviews     Review[]
}

model Order {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  status        OrderStatus
  total         Decimal
  restaurant  Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  String
  orderItems  OrderItem[]
  userId        String
  user          User     @relation(fields: [userId], references: [id])
}

model OrderItem {
  id          String   @id @default(cuid())
  quantity    Int
  price       Decimal
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String
  menuItem    MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId  String
}

model Customer {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  orders      Order[]
  cart        Cart?
}

model Cart {
  id          String   @id @default(cuid())
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  String   @unique
  cartItems   CartItem[]
}

model CartItem {
  id          String   @id @default(cuid())
  quantity    Int
  cart        Cart     @relation(fields: [cartId], references: [id])
  cartId      String
  menuItem    MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId  String
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

model UserPreference {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
  dietaryRestrictions String[]
  allergies     String[]
  spicePreference String?
}

model FavoriteDish {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  menuItemId    String
  menuItem      MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  @@unique([userId, menuItemId])
}

model Review {
  id          String   @id @default(cuid())
  userId      String
  menuItemId  String
  rating      Int
  comment     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  menuItem    MenuItem @relation(fields: [menuItemId], references: [id])
}

model NewsletterSubscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

