generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  phoneNumber    String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  isVerified     Boolean         @default(false)
  role           Role            @default(USER)
  accounts       Account[]
  favoriteDishes FavoriteDish[]
  orders         Order[]
  reviews        Review[]
  sessions       Session[]
  preferences    UserPreference?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Restaurant {
  id             String         @id @default(cuid())
  name           String
  description    String
  address        String
  phone          String
  email          String
  openingHours   Json
  menuCategories MenuCategory[]
  orders         Order[]
}

model MenuCategory {
  id           String     @id @default(cuid())
  name         String
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  menuItems    MenuItem[]
}

model MenuItem {
  id             String         @id @default(cuid())
  name           String
  description    String
  price          Decimal
  image          String
  categoryId     String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now()) @updatedAt
  cartItems      CartItem[]
  favoriteDishes FavoriteDish[]
  category       MenuCategory   @relation(fields: [categoryId], references: [id])
  orderItems     OrderItem[]
  reviews        Review[]
}

model Order {
  id           String      @id @default(cuid())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  status       OrderStatus
  total        Decimal
  restaurantId String
  customerId   String
  userId       String
  customer     Customer    @relation(fields: [customerId], references: [id])
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  user         User        @relation(fields: [userId], references: [id])
  orderItems   OrderItem[]
}

model OrderItem {
  id         String   @id @default(cuid())
  quantity   Int
  price      Decimal
  orderId    String
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  order      Order    @relation(fields: [orderId], references: [id])
}

model Customer {
  id     String  @id @default(cuid())
  name   String
  email  String  @unique
  phone  String?
  cart   Cart?
  orders Order[]
}

model Cart {
  id         String     @id @default(cuid())
  customerId String     @unique
  customer   Customer   @relation(fields: [customerId], references: [id])
  cartItems  CartItem[]
}

model CartItem {
  id         String   @id @default(cuid())
  quantity   Int
  cartId     String
  menuItemId String
  cart       Cart     @relation(fields: [cartId], references: [id])
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
}

model UserPreference {
  id                  String   @id @default(cuid())
  userId              String   @unique
  dietaryRestrictions String[]
  allergies           String[]
  spicePreference     String?
  user                User     @relation(fields: [userId], references: [id])
}

model FavoriteDish {
  id         String   @id @default(cuid())
  userId     String
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, menuItemId])
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  menuItemId String
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model NewsletterSubscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

enum Role {
  USER
  ADMIN
}
